#+TITLE: Emacs Configuration
* Starting Up
** Time It
On start-up, display how quickly emacs started up.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC
** Add Package Sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
#+END_SRC
Use ~use-package~.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC
Always.
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC
Use ~M-x package-refresh-contents~ to reload the list of packages after adding the package sources for the first time.
** Add Elisp Directory and Other Files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/home/gautam/.emacs.d/elisp/")
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
#+END_SRC
If I ever need to load files outside of my package system, I know where to find
them. I also set up ~use-package~ here.
** Common Lisp
#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC
* General Configuration
** Graphics
*** Decluttering
**** Splash Screen
Get rid of that ugly splash screen.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
**** Fullscreen
Start emacs in glorious fullscreen.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(setq frame-title-format "")
#+END_SRC
**** Bars
Menus are not required; neither is the scroll bar.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
It is no longer the 90s. Toolbars and their little icons are not cool.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
**** Cursor Blinking
The cursor should not blink.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
(when (display-graphic-p)
  (setq-default cursor-type 'box))
(setq x-stretch-cursor 1)
#+END_SRC
**** Notifications
**** Bells
Visual, not audible bells.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+END_SRC
**** Auto-revert
Turn off reverting buffer messages.
#+BEGIN_SRC emacs-lisp
(setq auto-revert-verbose nil)
#+END_SRC
**** Autosave
Turn off autosave messages. To do this, we define our own auto-save function and
replace the built-in one with ours.
#+BEGIN_SRC emacs-lisp
(setq auto-save-timeout 99999)
(defvar bjm/auto-save-timer nil
  "Timer to run `bjm/auto-save-silent'")
(defvar bjm/auto-save-interval 5
  "How often in seconds of idle time to auto-save with `bjm/auto-save-silent'")
(defun bjm/auto-save-silent ()
  "Auto-save all buffers silently"
  (interactive)
  (do-auto-save t))
(setq bjm/auto-save-timer
      (run-with-idle-timer 0 bjm/auto-save-interval 'bjm/auto-save-silent))
#+END_SRC
**** Modeline
Keep a simpler modeline...
#+BEGIN_SRC emacs-lisp
(use-package diminish
    :defer 1)
#+END_SRC
and a smarter one.
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
    :defer 2
    :config
    (sml/setup))
#+END_SRC
*** Modeline
**** Time
What time is it, Mr. Emacs?
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(setq display-time-format "%l:%M%p")
#+END_SRC
**** Column
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC
*** Ban Whitespace
#+BEGIN_SRC emacs-lisp
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Indentation
**** Keep Things Indented
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :disabled
    :diminish aggressive-indent-mode
    :hook
    (prog-mode . aggressive-indent-mode)
    (python-mode . (lambda () (aggressive-indent-mode -1))))
#+END_SRC
**** Wrap Indented Lines Sensibly
This way, indented lines that are wrapped with ~visual-line-mode~ do not begin at character 0, but from where they are indented.
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap)
  (when (fboundp 'adaptive-wrap-prefix-mode)
  (defun my-activate-adaptive-wrap-prefix-mode ()
    "Toggle `visual-line-mode' and `adaptive-wrap-prefix-mode' simultaneously."
    (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1)))
  (add-hook 'visual-line-mode-hook 'my-activate-adaptive-wrap-prefix-mode))
#+END_SRC
*** Mouse Scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed t) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC
*** Indentation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC
** Ease of Use
*** Dialogs
**** From Yes/No to y/n
This makes things so much simpler. There's not any ambiguity to begin with.
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Searching and Finding
#+BEGIN_SRC emacs-lisp
(use-package ido)
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-create-new-buffer 'always)
(setq ido-use-faces nil)
(setq ido-file-extensions-order '(".org" ".tex" ".py"))
#+END_SRC
*** Delete The Selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Autocomplete
**** ignore case
#+BEGIN_SRC emacs-lisp
(setq completion-ignore-case t)
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
(use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode))
#+END_SRC
*** Spellchek
#+BEGIN_SRC emacs-lisp
(use-package flyspell
    :defer 1
    :hook (text-mode . flyspell-mode)
    :diminish
    :bind (:map flyspell-mouse-map
                ([down-mouse-3] . #'flyspell-correct-word)
                ([mouse-3]      . #'undefined)))
#+END_SRC
*** Kill Current Buffer
#+BEGIN_SRC emacs-lisp
(defun bjm/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+END_SRC
*** Backups
Keep backups in a dedicated spot and not in the current directory: this saves so much clutter
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
Also, I have lots of disk space, and not so much patience when I lose an important file. So I save lots.
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
**** History
It's nice to have a history of commands so that when you open a new emacs instance, you can get right to work.
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC
***** Desktop
On a similar note, save the desktop.
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
(setq desktop-restore-eager 250)
#+END_SRC
Make two buffers with the same file name distinguishable.
#+BEGIN_SRC emacs-lisp
(use-package uniquify
    :defer 1
    :ensure nil
    :custom
    (uniquify-after-kill-buffer-p t)
    (uniquify-buffer-name-style 'post-forward)
    (uniquify-strip-common-suffix t))
#+END_SRC
***** Save Place
Opens a file to the same place in which it was last closed.
#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC
*** Dictionary
#+BEGIN_SRC emacs-lisp
(require 'sdcv-mode)
#+END_SRC
*** Sentences End With a Single Space
This is necessary to make sentence navigation commands work for me.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Better Searching
Enable ivy-mode.
#+BEGIN_SRC emacs-lisp
(use-package ivy)
(diminish 'ivy-mode)
(ivy-mode 1)
#+END_SRC
Don't search, swipe.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(setq ivy-display-style 'fancy)
#+END_SRC
Get swiper to recentre the display when it exits.
#+BEGIN_SRC emacs-lisp
(defun bjm-swiper-recenter (&rest args)
  "recenter display after swiper"
  (recenter)
  )
(advice-add 'swiper :after #'bjm-swiper-recenter)
#+END_SRC
*** Abbreviations
Load them.
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/abbrevs.el")
#+END_SRC
Always use this wonderful tool.
#+BEGIN_SRC emacs-lispn
(set-default 'abbrev-mode t)
#+END_SRC
Because it's always on, we don't need to know about it.
#+BEGIN_SRC emacs-lisp
(diminish 'abbrev-mode)
#+END_SRC
Save them in the ~.emacs.d~ dir.
#+BEGIN_SRC emacs-lisp
(setq abbrev-file-name "~/.emacs.d/abbrevs.el")
#+END_SRC
Save abbreviations upon saving a file.
#+BEGIN_SRC emacs-lisp
(setq save-abbrevs 'silent)
#+END_SRC
*** Thing at Point
#+BEGIN_SRC emacs-lisp
(require 'thingatpt)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Dired
*** Revert Buffer
Have the most up-to-date version of the buffer when using dired.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
*** Declutter
#+BEGIN_SRC emacs-lisp
(defun xah-dired-mode-setup ()
  "to be run as hook for `dired-mode'."
  (dired-hide-details-mode 1))
(add-hook 'dired-mode-hook 'xah-dired-mode-setup)
#+END_SRC
*** Copy and Delete
Allow dired to recursively copy and delete directories. ~always~ ensures that no
confirmation dialog comes up, and ~top~ does it only once.
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-copies (quote always))
(setq dired-recursive-deletes (quote top))
#+END_SRC
*** Speed Sorting
Easily sort based on a lot of options such as name, time, size, and
extension. Use ~S~ to use in a dired buffer.
#+BEGIN_SRC emacs-lisp
(use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup))
#+END_SRC
** God Mode
Enable god-mode.
#+BEGIN_SRC emacs-lisp
(use-package god-mode
  :ensure t)
#+END_SRC
*** Indicate Mode with Modeline
#+BEGIN_SRC emacs-lisp
(defun me//god-mode-indicator ()
  (cond (god-local-mode
         (progn
         (set-face-background 'mode-line "#b58900")
           (set-face-foreground 'mode-line "gray")
           (set-face-background 'mode-line-inactive "gray30")
           (set-face-foreground 'mode-line-inactive "#b58900")))
        (t
         (progn
           (set-face-background 'mode-line-inactive "#eee8d5")
           (set-face-foreground 'mode-line-inactive "#657b83")
           (set-face-background 'mode-line "#eee8d5")
           (set-face-foreground 'mode-line "#657b83")))))

(add-hook 'god-mode-enabled-hook #'me//god-mode-indicator)
(add-hook 'god-mode-disabled-hook #'me//god-mode-indicator)
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :pin manual
  :config
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook (lambda () (pdf-view-midnight-minor-mode)))
  (setq pdf-view-midnight-colours '("#657b83" . "#fdf6e3"))
  (setq-default pdf-view-display-size 'fit-page) ;
  (setq pdf-annot-activate-created-annotations t)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (setq pdf-view-resize-factor 1.1)
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_SRC
*** Electric Pairs
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-pairs
      '(
        (?\" . ?\")
        (?\{ . ?\})))
#+END_SRC
* Global Keybindings
** Bind Key
#+BEGIN_SRC emacs-lisp
(require 'bind-key)
(use-package which-key
  :defer nil
  :diminish which-key-mode
  :config
  (which-key-mode))
#+END_SRC
** The Actual Keybindings
*** Easy Meta
Alt is hard to type easily.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-SPC") 'execute-extended-command)
#+END_SRC
*** Set Mark
Need to have a replacement because we rebound ~C-SPC~.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t") 'set-mark-command)
#+END_SRC
*** Shell Backwards Kill
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-w" 'backward-kill-word)
#+END_SRC
*** Easy Kill
Add extra keybinding to account for missing.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
#+END_SRC
*** Shell Backspace
Use shell like ~C-h~ instead of Backspace.
#+BEGIN_SRC emacs-lisp
(define-key key-translation-map [?\C-h] [?\C-?])
(global-set-key (kbd "<f1>") 'help-command)
#+END_SRC
*** Better Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC
**** Ibuffer Hydra
Courtesy of [[https://github.com/abo-abo/hydra/wiki/Ibuffer][hydra wiki]].
#+BEGIN_SRC emacs-lisp
(defhydra hydra-ibuffer-main (:color pink :hint nil)
  "
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)
  ("k" ibuffer-backward-line)

  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)

  ("D" ibuffer-do-delete)
  ("S" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("s" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)

  ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
  ("q" quit-window "quit ibuffer" :color blue)
  ("." nil "toggle hydra" :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5
                              :after-exit (hydra-ibuffer-main/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-action (:color teal :columns 4
                                :after-exit
                                (if (eq major-mode 'ibuffer-mode)
                                    (hydra-ibuffer-main/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))

(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("b" hydra-ibuffer-main/body "back" :color blue))
#+END_SRC
Use with period.
#+BEGIN_SRC emacs-lisp
(define-key ibuffer-mode-map "." 'hydra-ibuffer-main/body)
#+END_SRC
*** Word Count
Count org-wc.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-f9>") 'org-wc-display)
#+END_SRC
*** God Mode
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-1") 'delete-other-windows)
(global-set-key (kbd "C-x C-2") 'split-window-below)
(global-set-key (kbd "C-x C-3") 'split-window-right)
(global-set-key (kbd "C-x C-0") 'delete-window)
#+END_SRC
*** Transpose Sentences and Paragraphs
Add an alias to do this easily.
#+BEGIN_SRC emacs-lisp
(defalias 'ts 'transpose-sentences)
(defalias 'tp 'transpose-paragraphs)
#+END_SRC
** Keychord
#+BEGIN_SRC emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
#+END_SRC
*** Number Symbols
Eliminate the shift key for inputting symbols.
#+BEGIN_SRC emacs-lisp
(key-chord-define-global "1q" "!")
(key-chord-define-global "2w" "@")
(key-chord-define-global "3e" "#")
(key-chord-define-global "4r" "$")
(key-chord-define-global "5t" "%")
(key-chord-define-global "6y" "^")
(key-chord-define-global "6t" "^")
(key-chord-define-global "7y" "&")
(key-chord-define-global "8u" "*")
(key-chord-define-global "9i" "(")
(key-chord-define-global "0o" ")")
(key-chord-define-global "-p" "_")
#+END_SRC
*** God Mode
Easily enter god mode.
#+BEGIN_SRC emacs-lisp
(key-chord-define-global "jk" 'god-local-mode)
#+END_SRC
* Theme
** Font Face
Normally use Hack.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Hack")
(set-frame-font "Hack" nil t)
#+END_SRC
** Solarized Light
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme)
(load-theme 'solarized-light t)
#+END_SRC
** Centered Buffer
#+BEGIN_SRC emacs-lisp
(use-package centered-window
  :ensure t
  :diminish centered-window-mode)
(centered-window-mode t)
#+END_SRC
** Autofills
Use visual line mode everywhere.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
Nicely wraps lines for ~text-mode~.[]
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'auto-fill-mode)
(add-hook 'change-log-mode-hook 'turn-on-auto-fill)
(eval-after-load "diminish" '(diminish 'auto-fill-mode-mode))
#+END_SRC
Quickly autofill the entire buffer by paragraph.
#+BEGIN_SRC emacs-lisp
(defun fill-buffer ()
  (interactive)
  (save-excursion
    (save-restriction
      (widen)
      (fill-region (point-min) (point-max)))))
#+END_SRC
*** 80 Columns
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
        (lambda() (set-fill-column 80)))
#+END_SRC
** Highlighting
*** Syntax
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(rainbow-mode 1)
(diminish 'rainbow-mode)
#+END_SRC
*** Source Code Blocks
Native syntax highlighting for source blocks in org mode.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC
*** Sentences
Highlight sentences. Credit to [[https://github.com/milkypostman/hl-sentence][Donald Curtis]].
#+BEGIN_SRC emacs-lisp
(require 'hl-sentence)
(add-hook 'text-mode-hook 'hl-sentence-mode)
#+END_SRC
Use Solarized Light cyan to highlight.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'hl-sentence nil
                     :background "#fdf6e3"
                     :foreground "#2aa198")
#+END_SRC
*** Parentheses
#+BEGIN_SRC emacs-lisp
(setq blink-matching-paren nil)
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC
*** Transient Mark
#+BEGIN_SRC emacs-lisp
(setq transient-mark-mode t)
#+END_SRC
* Org
** Setup
We have to use ~require~ to get ~ox-hugo~ to work properly.
#+BEGIN_SRC emacs-lisp
(require 'org)
(use-package org
  :bind
  ("C-c l" . org-store-link)
  ("C-c a" . org-agenda)
  ("A-h" . org-mark-element)
  ("C-c c" . org-capture)
  :diminish
  (org-indent-mode)
  :custom
  (org-startup-indented t))
#+END_SRC
** Ox-hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
    :ensure t
    :after ox)
(require 'ox-hugo-auto-export)
#+END_SRC
** Prettifying
*** Hide Emphasis
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode))))
#+END_SRC
*** Bullet List
Have lists begun by, for example, ~-~ look like a bullet-pointed list.
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+END_SRC
*** Visual Lines
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
** LaTeX
*** Export Command
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-f4>") 'org-latex-export-to-pdf)
#+END_SRC
*** Autocomplete ~$~
#+BEGIN_SRC emacs-lisp
(defvar org-electric-pairs '((?$ . ?$) )) "Electric pairs for org-mode."
(defun dollar-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))
(add-hook 'org-mode-hook 'dollar-add-electric-pairs)
(add-hook 'LaTeX-mode-hook 'dollar-add-electric-pairs)
#+END_SRC
*** Highlighting
Inline LaTeX such as $y = mx + b$ will appear in a different colour.
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC
*** Scaling Preview
By default, it's really small on my HiDPI screen.
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
*** Export LaTeX Quotes
#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC
*** Use XeTeX
#+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes
#+END_SRC
*** Don't Break Paragraph on Comments
Remove comments from org document when exporting to LaTeX.
#+BEGIN_SRC emacs-lisp
(defun delete-org-comments (backend)
  (loop for comment in (reverse (org-element-map (org-element-parse-buffer)
                    'comment 'identity))
    do
    (setf (buffer-substring (org-element-property :begin comment)
                (org-element-property :end comment))
          "")))
(add-hook 'org-export-before-processing-hook 'delete-org-comments)
#+END_SRC
** Export to Word
#+BEGIN_SRC emacs-lisp
(setq org-export-odt-preferred-output-format "doc")
(setq org-odt-preferred-output-format "doc")

;; Only OSX need below setup
(defun my-setup-odt-org-convert-process ()
  (interactive)
  (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
    (when (and (eq system-type 'darwin) (file-exists-p cmd))
      ;; org v7
      (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")))
      ;; org v8
      (setq org-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))
    ))
(my-setup-odt-org-convert-process)
#+END_SRC
** Markdown Conversion
#+BEGIN_SRC emacs-lisp
 (defun markdown-convert-buffer-to-org ()
    "Convert the current buffer's content from markdown to orgmode format and save it with the current buffer's file name but with .org extension."
    (interactive)
    (shell-command-on-region (point-min) (point-max)
                             (format "pandoc -f markdown -t org -o %s"
                                     (concat (file-name-sans-extension (buffer-file-name)) ".org"))))
#+END_SRC
* TeX
** AUCTeX
#+BEGIN_SRC emacs-lisp
(use-package auctex
    :defer t
    :ensure t)
  (require 'tex-site)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (defun turn-on-outline-minor-mode ()
  (outline-minor-mode 1))
  (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
  (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
  (setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else
  (setq LaTeX-eqnarray-label "eq"
        LaTeX-equation-label "eq"
        LaTeX-figure-label "fig"
        LaTeX-table-label "tab"
        LaTeX-myChapter-label "chap"
        TeX-auto-save t
        TeX-newline-function 'reindent-then-newline-and-indent
        TeX-parse-self t
        LaTeX-section-hook
        '(LaTeX-section-heading
          LaTeX-section-title
          LaTeX-section-toc
          LaTeX-section-section
          LaTeX-section-label))
#+END_SRC
Don't make super and subscripts smaller.
#+BEGIN_SRC emacs-lisp
(setq font-latex-fontify-script nil)
#+END_SRC
Company math symbol completion.
#+BEGIN_SRC emacs-lisp
(use-package company-math)
(add-to-list 'company-backends 'company-math-symbols-latex)
#+END_SRC
Make preview size bigger.
#+BEGIN_SRC emacs-lisp
(set-default 'preview-scale-function 3.0)
#+END_SRC
** Electric Dollars and Parens
Insert dollar signs electrically.
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-mode-hook
	  (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
			  (cons "$" "$"))))
(add-hook 'LaTeX-mode-hook
	  (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
			  (cons "$" "$"))))
(add-hook 'text-mode-hook
	  (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
			  (cons "(" ")"))))
#+END_SRC
** CDLaTeX
I use this package to easily insert math characters.
#+BEGIN_SRC emacs-lisp
(use-package cdlatex)
#+END_SRC
Automatically turn on when using LaTeX.
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
#+END_SRC
Insert math with semicolon.
#+BEGIN_SRC emacs-lisp
(setq cdlatex-math-symbol-prefix ?;)
#+END_SRC
** Diffing
#+BEGIN_SRC
(use-package latexdiff)
#+END_SRC
** Auto Preview
#+BEGIN_SRC emacs-lisp
(defvar my/was-inside-math nil)

(defun my/preview-when-leaving-math ()
 (let ((in-math (texmathp)))
   (cond (in-math
          (setq my/was-inside-math t))
         ((and (not in-math)
               my/was-inside-math)
          (progn
            (condition-case ex
                (unless (get-process "Preview-Ghostscript")
                  (preview-at-point))
              ('error
               (message (format "Could not invoke Preview: %s" ex))))
            (setq my/was-inside-math nil))))))

(add-hook 'post-command-hook 'my/preview-when-leaving-math t)
#+END_SRC
* Snippets
Load our snippets.
#+BEGIN_SRC emacs-lisp
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(use-package yasnippet)
(eval-after-load "diminish"
  '(progn
     (eval-after-load "yasnippet"
       '(diminish 'yas-minor-mode))))
(yas-global-mode 1)
#+END_SRC
Use SPC instead of TAB to expand snippets.
#+BEGIN_SRC emacs-lisp
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "SPC")
  (or (bound-and-true-p yas-maybe-expand) #'yas-expand))
#+END_SRC
** Vim-like Ultisnips
Use texmathp to tell if you are in math mode.
#+BEGIN_SRC emacs-lisp
(require 'texmathp)
#+END_SRC
Using a hydra, I setup automatic expansion of yasnippets; when a leader key is
pressed, that key is inserted, but if the next key of a defined sequence is
pressed, the leader key is erased and the snippet is expanded.
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC
For the fraction command, we use general.el.
#+BEGIN_SRC emacs-lisp
(require 'general)
#+END_SRC
*** Helper Functions
**** Delete n Characters
Delete n characters before the point.
#+BEGIN_SRC emacs-lisp
(defun gm/delete-chars (n)
  (dotimes (i n) (delete-char -1)))
#+END_SRC
**** Last n Characters
Return the last n characters before the point.
#+BEGIN_SRC emacs-lisp
(defun gm/last-n-chars (n)
  (buffer-substring-no-properties (- (point) n) (point)))
#+END_SRC
**** Expand Snippet
#+BEGIN_SRC emacs-lisp
(defun gm/expand-snippet (name)
  (yas-expand-snippet (yas-lookup-snippet name)))
#+END_SRC
**** Check Correct Prefix
Most of my snippets for math mode are longer than two characters. In this case,
I need to check that the correct characters precede the typed ones before
executing a snippet. For example, I should only execute the "sin" snippet after
typing "in" if the character "s" precedes "in." This function returns true if
the given string, not including the last character, precedes the point.
#+BEGIN_SRC emacs-lisp
(defun gm/prefix-before-point (key)
  (let ((len (length key)))
    (equal (substring key 0 (1- len))
           (gm/last-n-chars (1- len)))
    ))
#+END_SRC
**** Math Mode Snippet
#+BEGIN_SRC emacs-lisp
(defun gm/snippet (key snippet)
  (let ((len (length key)))
    (if (and (texmathp) (gm/prefix-before-point key))
        (progn
          (gm/delete-chars (1- len))
          (gm/expand-snippet snippet))
      (insert (substring key (-1 len) len))
    )
  ))
#+END_SRC
*** Squared, Square Root
#+BEGIN_SRC emacs-lisp
(defhydra hydra-s (:color blue
                          :body-pre (insert "s")
                          :idle 1.0)
  ("r" (gm/snippet "sr" "squared") "squared")
  ("q" (gm/snippet "sq" "sqrt") "square root"))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (local-set-key (kbd "s") 'hydra-s/body)))
#+END_SRC
*** Cubed, Subset
#+BEGIN_SRC emacs-lisp
(defhydra hydra-c (:color blue
                          :body-pre (insert "c")
                          :idle 1.0)
  ("b" (gm/snippet "cb" "cubed") "cubed")
  ("c" (gm/snippet "cc" "subset") "subset"))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (local-set-key (kbd "c") 'hydra-c/body)))
#+END_SRC
*** Derivative
#+BEGIN_SRC emacs-lisp
(defhydra hydra-d (:color blue
                         :body-pre (insert "d")
                         :idle 1.0)
("d" (gm/snippet "dd" "derivative") "derivative"))

 (add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "d") 'hydra-d/body)))
#+END_SRC
*** Partial Derivative, Brackets
#+BEGIN_SRC emacs-lisp
(defhydra hydra-r (:color blue
                          :body-pre (insert "r")
                          :idle 1.0)
  ("t" (gm/snippet "part" "partial") "partial")
  ("9" (gm/snippet "lr9" "parentheses") "parentheses")
  ("[" (gm/snippet "lr[" "brackets") "brackets")
  ("{" (gm/snippet "lr{" "set") "set"))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (local-set-key (kbd "r") 'hydra-r/body)))
#+END_SRC
*** Inverse, Integral, In
#+BEGIN_SRC emacs-lisp
(defhydra hydra-n (:color blue
                          :body-pre (insert "n")
                          :idle 1.0)
  ("v" (gm/snippet "inv" "inverse") "inverse")
  ("t" (gm/snippet "int" "integral") "integral")
  ("n" (gm/snippet "inn" "inn") "in"))
(add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "n") 'hydra-n/body)))
#+END_SRC
*** Maps To
#+BEGIN_SRC emacs-lisp
#+END_SRC
*** Implies
#+BEGIN_SRC emacs-lisp
(defhydra hydra-eq (:color blue
                         :body-pre (insenmsrt "=")
                         :idle 1.0)
(">" (gm/snippet "!>" "implies") "implies"))

(add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "=") 'hydra-eq/body)))
#+END_SRC
*** Limit, Sin
#+BEGIN_SRC emacs-lisp
(defhydra hydra-i (:color blue
                          :body-pre (insert "i")
                          :idle 1.0)
  ("m" (gm/snippet "lim" "limit") "limit")
  ("n" (if (and (texmathp) (gm/prefix-before-point "sin"))
           (if (gm/prefix-before-point "asin")
               (progn
                 (gm/delete-chars 3)
                 (gm/expand-snippet "asin"))
             (progn
               (gm/delete-chars 2)
               (gm/expand-snippet "sin")))
         (hydra-n/body)) "(a)sin"))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (local-set-key (kbd "i") 'hydra-i/body)))
#+END_SRC
*** Sum
#+BEGIN_SRC emacs-lisp
(defhydra hydra-u (:color blue
                          :body-pre (insert "u")
                          :idle 1.0)
  ("m" (gm/snippet "sum" "summation") "summation"))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (local-set-key (kbd "u") 'hydra-u/body)))
#+END_SRC
*** Set, Sec
#+BEGIN_SRC emacs-lisp
(defhydra hydra-e (:color blue
                          :body-pre (insert "e")
                          :idle 1.0)
  ("t" (gm/snippet "set" "set") "set")
  ("c" (gm/snippet "sec" "sec") "sec"))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (local-set-key (kbd "e") 'hydra-e/body)))
#+END_SRC
*** Log, Cos, Arccos, Cot, Arccot
#+BEGIN_SRC emacs-lisp
(defhydra hydra-o (:color blue
                         :body-pre (insert "o")
                         :idle 1.0)
("g" (gm/snippet "log" "log") "log")
("s" (if (and (texmathp) (gm/prefix-before-point "cos"))
           (if (gm/prefix-before-point "acos")
               (progn
                 (gm/delete-chars 3)
                 (gm/expand-snippet "acos"))
             (progn
               (gm/delete-chars 2)
               (gm/expand-snippet "cos"))
         (insert "s")) "(a)cos"))
("t" (if (and (texmathp) (gm/prefix-before-point "cot"))
           (if (gm/prefix-before-point "acot")
               (progn
                 (gm/delete-chars 3)
                 (gm/expand-snippet "acot"))
             (progn
               (gm/delete-chars 2)
               (gm/expand-snippet "cot")))
         (insert "t")) "(a)cot"))

 (add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "o") 'hydra-o/body)))
#+END_SRC
*** Tan, Arctan
#+BEGIN_SRC emacs-lisp
(defhydra hydra-a (:color blue
                         :body-pre (insert "a")
                         :idle 1.0)
("n" (if (and (texmathp) (gm/prefix-before-point "tan"))
           (if (gm/prefix-before-point "tan")
               (progn
                 (gm/delete-chars 3)
                 (gm/expand-snippet "atan"))
             (progn
               (gm/delete-chars 2)
               (gm/expand-snippet "tan")))
         (insert "n")) "(a)tan"))
 (add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "a") 'hydra-a/body)))
#+END_SRC
*** Fraction
#+BEGIN_SRC emacs-lisp
(defhydra hydra-f (:color blue
                         :body-pre (insert "f")
                         :idle 1.0)
("r" (gm/snippet "fr" "frac") "frac"))

 (add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd "f") 'hydra-f/body)))
#+END_SRC
*** Math Symbols
#+BEGIN_SRC emacs-lisp
(defhydra hydra-semicolon-a (:color blue
                             :idle 1.0)
(";" hydra-semicolon-b/body "alpha")
("a" (insert "\\alpha") "α")
("A" (insert "\\forall ") "∀")
("b" (insert "\\beta") "β")
("d" (insert "\\delta") "delta")
("D" (insert "\\Delta") "Delta")
("e" (insert "\\epsilon") "epsilon")
("E" (insert "\\exists ") "∃")
("f" (insert "\\varphi") "γ")
("g" (insert "\\gamma") "γ")
("G" (insert "\\Gamma") "Γ")
("h" (insert "\\eta") "Γ")
("n" (insert "\\nu") "nu")

)
(defhydra hydra-semicolon-b (:color blue
                             :idle 1.0)
(";" hydra-semicolon-a/body "alpha")
)
(add-hook 'LaTeX-mode-hook
     (lambda ()
     (local-set-key (kbd ";") 'hydra-semicolon-a/body)))
#+END_SRC
* Mail
This is pretty complicated; I need to sort through this and break it up into more digestible chunks.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(use-package mu4e
  :ensure nil
  :custom
  (mu4e-attachment-dir "~/Downloads")
  (mu4e-drafts-folder "/[Gmail].Drafts")
  (mu4e-get-mail-command "offlineimap")
  (mu4e-maildir "~/Maildir")
  (mu4e-refile-folder "/[Gmail].All Mail")
  (mu4e-sent-folder "/[Gmail].Sent Mail")
  (mu4e-maildir-shortcuts
   '(("/[Gmail].INBOX" . ?i)
     ("/[Gmail].All Mail" . ?a)
     ("/[Gmail].Trash" . ?d)
     ("/[Gmail].Drafts" . ?D)
     ("/[Gmail].Sent Mail" . ?s)
     ))
  (mu4e-trash-folder "/[Gmail].Trash")
  (mu4e-update-interval 300)
  (mu4e-use-fancy-chars t)
  (mu4e-view-show-addresses t)
  (mu4e-view-show-images t))
;; use mu4e for e-mail in emacs
(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-headers-date-format "%d-%m-%Y")

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)
(add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

;; don't save message to Sent Messages, [Gmail].IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; something about ourselves
(setq
   user-mail-address "manga@utschools.ca"
   user-full-name  "Gautam Manohar"
   mu4e-compose-signature
    (concat
      "Gautam Manohar, S6 UTS\n"
      "https://gautammanohar.com\n"))

(use-package smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   smtpmail-auth-credentials
     '(("smtp.gmail.com" 587 "manga@utschools.ca" nil))
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587)

(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

(use-package mu4e-alert
  :ensure t
  :after mu4e
  :init
  (setq mu4e-alert-interesting-mail-query
     "flag:unread maildir:/[Gmail].INBOX")
  (mu4e-alert-enable-mode-line-display)
  (defun gjstein-refresh-mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display)
    )
  (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
  )
;; Don't ask for a 'context' upon opening mu4e
(setq mu4e-context-policy 'pick-first)
;; Don't ask to quit... why is this the default?
(setq mu4e-confirm-quit nil)
;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)
;; use 'fancy' non-ascii characters in various places in mu4e
#+END_SRC
* End
Finally, close the ~let~ block we opened way back when and set a higher garbage-collection.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+END_SRC
